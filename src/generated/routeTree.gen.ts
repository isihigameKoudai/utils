/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as StableFluidsImport } from './../routes/stable-fluids'
import { Route as ShaderImport } from './../routes/shader'
import { Route as PlaygroundImport } from './../routes/playground'
import { Route as MeltTheBorderImport } from './../routes/melt-the-border'
import { Route as IndexImport } from './../routes/index'
import { Route as ThreeDimensionIndexImport } from './../routes/three-dimension/index'
import { Route as NoiseIndexImport } from './../routes/noise/index'
import { Route as CryptoChartsIndexImport } from './../routes/crypto-charts/index'
import { Route as AudioIndexImport } from './../routes/audio/index'
import { Route as AggregateBillIndexImport } from './../routes/aggregate-bill/index'
import { Route as ThreeDimensionShadowsImport } from './../routes/three-dimension/shadows'
import { Route as ThreeDimensionShaderImport } from './../routes/three-dimension/shader'
import { Route as ThreeDimensionParticleImport } from './../routes/three-dimension/particle'
import { Route as SamplesSquareAparkImport } from './../routes/samples/square-apark'
import { Route as SamplesPoseDetectionImport } from './../routes/samples/pose-detection'
import { Route as SamplesNormalCircleImport } from './../routes/samples/normal-circle'
import { Route as SamplesIstateImport } from './../routes/samples/istate'
import { Route as SamplesHandPoseDetectionImport } from './../routes/samples/hand-pose-detection'
import { Route as SamplesFollowerCircleImport } from './../routes/samples/follower-circle'
import { Route as SamplesFluidDetectImport } from './../routes/samples/fluid-detect'
import { Route as SamplesFaceLandmarkDetectorImport } from './../routes/samples/face-landmark-detector'
import { Route as SamplesDetectorImport } from './../routes/samples/detector'
import { Route as SamplesAudioCircleImport } from './../routes/samples/audio-circle'
import { Route as Samples5starParticleImport } from './../routes/samples/5star-particle'
import { Route as NoiseFractalImport } from './../routes/noise/fractal'
import { Route as NoiseFbmImport } from './../routes/noise/fbm'
import { Route as NoiseCellularImport } from './../routes/noise/cellular'
import { Route as AudioSpeechImport } from './../routes/audio/speech'
import { Route as AudioMicImport } from './../routes/audio/mic'
import { Route as CryptoChartsMultiTokenImport } from './../routes/crypto-charts/multi/$token'

// Create/Update Routes

const StableFluidsRoute = StableFluidsImport.update({
  id: '/stable-fluids',
  path: '/stable-fluids',
  getParentRoute: () => rootRoute,
} as any)

const ShaderRoute = ShaderImport.update({
  id: '/shader',
  path: '/shader',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const MeltTheBorderRoute = MeltTheBorderImport.update({
  id: '/melt-the-border',
  path: '/melt-the-border',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ThreeDimensionIndexRoute = ThreeDimensionIndexImport.update({
  id: '/three-dimension/',
  path: '/three-dimension/',
  getParentRoute: () => rootRoute,
} as any)

const NoiseIndexRoute = NoiseIndexImport.update({
  id: '/noise/',
  path: '/noise/',
  getParentRoute: () => rootRoute,
} as any)

const CryptoChartsIndexRoute = CryptoChartsIndexImport.update({
  id: '/crypto-charts/',
  path: '/crypto-charts/',
  getParentRoute: () => rootRoute,
} as any)

const AudioIndexRoute = AudioIndexImport.update({
  id: '/audio/',
  path: '/audio/',
  getParentRoute: () => rootRoute,
} as any)

const AggregateBillIndexRoute = AggregateBillIndexImport.update({
  id: '/aggregate-bill/',
  path: '/aggregate-bill/',
  getParentRoute: () => rootRoute,
} as any)

const ThreeDimensionShadowsRoute = ThreeDimensionShadowsImport.update({
  id: '/three-dimension/shadows',
  path: '/three-dimension/shadows',
  getParentRoute: () => rootRoute,
} as any)

const ThreeDimensionShaderRoute = ThreeDimensionShaderImport.update({
  id: '/three-dimension/shader',
  path: '/three-dimension/shader',
  getParentRoute: () => rootRoute,
} as any)

const ThreeDimensionParticleRoute = ThreeDimensionParticleImport.update({
  id: '/three-dimension/particle',
  path: '/three-dimension/particle',
  getParentRoute: () => rootRoute,
} as any)

const SamplesSquareAparkRoute = SamplesSquareAparkImport.update({
  id: '/samples/square-apark',
  path: '/samples/square-apark',
  getParentRoute: () => rootRoute,
} as any)

const SamplesPoseDetectionRoute = SamplesPoseDetectionImport.update({
  id: '/samples/pose-detection',
  path: '/samples/pose-detection',
  getParentRoute: () => rootRoute,
} as any)

const SamplesNormalCircleRoute = SamplesNormalCircleImport.update({
  id: '/samples/normal-circle',
  path: '/samples/normal-circle',
  getParentRoute: () => rootRoute,
} as any)

const SamplesIstateRoute = SamplesIstateImport.update({
  id: '/samples/istate',
  path: '/samples/istate',
  getParentRoute: () => rootRoute,
} as any)

const SamplesHandPoseDetectionRoute = SamplesHandPoseDetectionImport.update({
  id: '/samples/hand-pose-detection',
  path: '/samples/hand-pose-detection',
  getParentRoute: () => rootRoute,
} as any)

const SamplesFollowerCircleRoute = SamplesFollowerCircleImport.update({
  id: '/samples/follower-circle',
  path: '/samples/follower-circle',
  getParentRoute: () => rootRoute,
} as any)

const SamplesFluidDetectRoute = SamplesFluidDetectImport.update({
  id: '/samples/fluid-detect',
  path: '/samples/fluid-detect',
  getParentRoute: () => rootRoute,
} as any)

const SamplesFaceLandmarkDetectorRoute =
  SamplesFaceLandmarkDetectorImport.update({
    id: '/samples/face-landmark-detector',
    path: '/samples/face-landmark-detector',
    getParentRoute: () => rootRoute,
  } as any)

const SamplesDetectorRoute = SamplesDetectorImport.update({
  id: '/samples/detector',
  path: '/samples/detector',
  getParentRoute: () => rootRoute,
} as any)

const SamplesAudioCircleRoute = SamplesAudioCircleImport.update({
  id: '/samples/audio-circle',
  path: '/samples/audio-circle',
  getParentRoute: () => rootRoute,
} as any)

const Samples5starParticleRoute = Samples5starParticleImport.update({
  id: '/samples/5star-particle',
  path: '/samples/5star-particle',
  getParentRoute: () => rootRoute,
} as any)

const NoiseFractalRoute = NoiseFractalImport.update({
  id: '/noise/fractal',
  path: '/noise/fractal',
  getParentRoute: () => rootRoute,
} as any)

const NoiseFbmRoute = NoiseFbmImport.update({
  id: '/noise/fbm',
  path: '/noise/fbm',
  getParentRoute: () => rootRoute,
} as any)

const NoiseCellularRoute = NoiseCellularImport.update({
  id: '/noise/cellular',
  path: '/noise/cellular',
  getParentRoute: () => rootRoute,
} as any)

const AudioSpeechRoute = AudioSpeechImport.update({
  id: '/audio/speech',
  path: '/audio/speech',
  getParentRoute: () => rootRoute,
} as any)

const AudioMicRoute = AudioMicImport.update({
  id: '/audio/mic',
  path: '/audio/mic',
  getParentRoute: () => rootRoute,
} as any)

const CryptoChartsMultiTokenRoute = CryptoChartsMultiTokenImport.update({
  id: '/crypto-charts/multi/$token',
  path: '/crypto-charts/multi/$token',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/melt-the-border': {
      id: '/melt-the-border'
      path: '/melt-the-border'
      fullPath: '/melt-the-border'
      preLoaderRoute: typeof MeltTheBorderImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/shader': {
      id: '/shader'
      path: '/shader'
      fullPath: '/shader'
      preLoaderRoute: typeof ShaderImport
      parentRoute: typeof rootRoute
    }
    '/stable-fluids': {
      id: '/stable-fluids'
      path: '/stable-fluids'
      fullPath: '/stable-fluids'
      preLoaderRoute: typeof StableFluidsImport
      parentRoute: typeof rootRoute
    }
    '/audio/mic': {
      id: '/audio/mic'
      path: '/audio/mic'
      fullPath: '/audio/mic'
      preLoaderRoute: typeof AudioMicImport
      parentRoute: typeof rootRoute
    }
    '/audio/speech': {
      id: '/audio/speech'
      path: '/audio/speech'
      fullPath: '/audio/speech'
      preLoaderRoute: typeof AudioSpeechImport
      parentRoute: typeof rootRoute
    }
    '/noise/cellular': {
      id: '/noise/cellular'
      path: '/noise/cellular'
      fullPath: '/noise/cellular'
      preLoaderRoute: typeof NoiseCellularImport
      parentRoute: typeof rootRoute
    }
    '/noise/fbm': {
      id: '/noise/fbm'
      path: '/noise/fbm'
      fullPath: '/noise/fbm'
      preLoaderRoute: typeof NoiseFbmImport
      parentRoute: typeof rootRoute
    }
    '/noise/fractal': {
      id: '/noise/fractal'
      path: '/noise/fractal'
      fullPath: '/noise/fractal'
      preLoaderRoute: typeof NoiseFractalImport
      parentRoute: typeof rootRoute
    }
    '/samples/5star-particle': {
      id: '/samples/5star-particle'
      path: '/samples/5star-particle'
      fullPath: '/samples/5star-particle'
      preLoaderRoute: typeof Samples5starParticleImport
      parentRoute: typeof rootRoute
    }
    '/samples/audio-circle': {
      id: '/samples/audio-circle'
      path: '/samples/audio-circle'
      fullPath: '/samples/audio-circle'
      preLoaderRoute: typeof SamplesAudioCircleImport
      parentRoute: typeof rootRoute
    }
    '/samples/detector': {
      id: '/samples/detector'
      path: '/samples/detector'
      fullPath: '/samples/detector'
      preLoaderRoute: typeof SamplesDetectorImport
      parentRoute: typeof rootRoute
    }
    '/samples/face-landmark-detector': {
      id: '/samples/face-landmark-detector'
      path: '/samples/face-landmark-detector'
      fullPath: '/samples/face-landmark-detector'
      preLoaderRoute: typeof SamplesFaceLandmarkDetectorImport
      parentRoute: typeof rootRoute
    }
    '/samples/fluid-detect': {
      id: '/samples/fluid-detect'
      path: '/samples/fluid-detect'
      fullPath: '/samples/fluid-detect'
      preLoaderRoute: typeof SamplesFluidDetectImport
      parentRoute: typeof rootRoute
    }
    '/samples/follower-circle': {
      id: '/samples/follower-circle'
      path: '/samples/follower-circle'
      fullPath: '/samples/follower-circle'
      preLoaderRoute: typeof SamplesFollowerCircleImport
      parentRoute: typeof rootRoute
    }
    '/samples/hand-pose-detection': {
      id: '/samples/hand-pose-detection'
      path: '/samples/hand-pose-detection'
      fullPath: '/samples/hand-pose-detection'
      preLoaderRoute: typeof SamplesHandPoseDetectionImport
      parentRoute: typeof rootRoute
    }
    '/samples/istate': {
      id: '/samples/istate'
      path: '/samples/istate'
      fullPath: '/samples/istate'
      preLoaderRoute: typeof SamplesIstateImport
      parentRoute: typeof rootRoute
    }
    '/samples/normal-circle': {
      id: '/samples/normal-circle'
      path: '/samples/normal-circle'
      fullPath: '/samples/normal-circle'
      preLoaderRoute: typeof SamplesNormalCircleImport
      parentRoute: typeof rootRoute
    }
    '/samples/pose-detection': {
      id: '/samples/pose-detection'
      path: '/samples/pose-detection'
      fullPath: '/samples/pose-detection'
      preLoaderRoute: typeof SamplesPoseDetectionImport
      parentRoute: typeof rootRoute
    }
    '/samples/square-apark': {
      id: '/samples/square-apark'
      path: '/samples/square-apark'
      fullPath: '/samples/square-apark'
      preLoaderRoute: typeof SamplesSquareAparkImport
      parentRoute: typeof rootRoute
    }
    '/three-dimension/particle': {
      id: '/three-dimension/particle'
      path: '/three-dimension/particle'
      fullPath: '/three-dimension/particle'
      preLoaderRoute: typeof ThreeDimensionParticleImport
      parentRoute: typeof rootRoute
    }
    '/three-dimension/shader': {
      id: '/three-dimension/shader'
      path: '/three-dimension/shader'
      fullPath: '/three-dimension/shader'
      preLoaderRoute: typeof ThreeDimensionShaderImport
      parentRoute: typeof rootRoute
    }
    '/three-dimension/shadows': {
      id: '/three-dimension/shadows'
      path: '/three-dimension/shadows'
      fullPath: '/three-dimension/shadows'
      preLoaderRoute: typeof ThreeDimensionShadowsImport
      parentRoute: typeof rootRoute
    }
    '/aggregate-bill/': {
      id: '/aggregate-bill/'
      path: '/aggregate-bill'
      fullPath: '/aggregate-bill'
      preLoaderRoute: typeof AggregateBillIndexImport
      parentRoute: typeof rootRoute
    }
    '/audio/': {
      id: '/audio/'
      path: '/audio'
      fullPath: '/audio'
      preLoaderRoute: typeof AudioIndexImport
      parentRoute: typeof rootRoute
    }
    '/crypto-charts/': {
      id: '/crypto-charts/'
      path: '/crypto-charts'
      fullPath: '/crypto-charts'
      preLoaderRoute: typeof CryptoChartsIndexImport
      parentRoute: typeof rootRoute
    }
    '/noise/': {
      id: '/noise/'
      path: '/noise'
      fullPath: '/noise'
      preLoaderRoute: typeof NoiseIndexImport
      parentRoute: typeof rootRoute
    }
    '/three-dimension/': {
      id: '/three-dimension/'
      path: '/three-dimension'
      fullPath: '/three-dimension'
      preLoaderRoute: typeof ThreeDimensionIndexImport
      parentRoute: typeof rootRoute
    }
    '/crypto-charts/multi/$token': {
      id: '/crypto-charts/multi/$token'
      path: '/crypto-charts/multi/$token'
      fullPath: '/crypto-charts/multi/$token'
      preLoaderRoute: typeof CryptoChartsMultiTokenImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/melt-the-border': typeof MeltTheBorderRoute
  '/playground': typeof PlaygroundRoute
  '/shader': typeof ShaderRoute
  '/stable-fluids': typeof StableFluidsRoute
  '/audio/mic': typeof AudioMicRoute
  '/audio/speech': typeof AudioSpeechRoute
  '/noise/cellular': typeof NoiseCellularRoute
  '/noise/fbm': typeof NoiseFbmRoute
  '/noise/fractal': typeof NoiseFractalRoute
  '/samples/5star-particle': typeof Samples5starParticleRoute
  '/samples/audio-circle': typeof SamplesAudioCircleRoute
  '/samples/detector': typeof SamplesDetectorRoute
  '/samples/face-landmark-detector': typeof SamplesFaceLandmarkDetectorRoute
  '/samples/fluid-detect': typeof SamplesFluidDetectRoute
  '/samples/follower-circle': typeof SamplesFollowerCircleRoute
  '/samples/hand-pose-detection': typeof SamplesHandPoseDetectionRoute
  '/samples/istate': typeof SamplesIstateRoute
  '/samples/normal-circle': typeof SamplesNormalCircleRoute
  '/samples/pose-detection': typeof SamplesPoseDetectionRoute
  '/samples/square-apark': typeof SamplesSquareAparkRoute
  '/three-dimension/particle': typeof ThreeDimensionParticleRoute
  '/three-dimension/shader': typeof ThreeDimensionShaderRoute
  '/three-dimension/shadows': typeof ThreeDimensionShadowsRoute
  '/aggregate-bill': typeof AggregateBillIndexRoute
  '/audio': typeof AudioIndexRoute
  '/crypto-charts': typeof CryptoChartsIndexRoute
  '/noise': typeof NoiseIndexRoute
  '/three-dimension': typeof ThreeDimensionIndexRoute
  '/crypto-charts/multi/$token': typeof CryptoChartsMultiTokenRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/melt-the-border': typeof MeltTheBorderRoute
  '/playground': typeof PlaygroundRoute
  '/shader': typeof ShaderRoute
  '/stable-fluids': typeof StableFluidsRoute
  '/audio/mic': typeof AudioMicRoute
  '/audio/speech': typeof AudioSpeechRoute
  '/noise/cellular': typeof NoiseCellularRoute
  '/noise/fbm': typeof NoiseFbmRoute
  '/noise/fractal': typeof NoiseFractalRoute
  '/samples/5star-particle': typeof Samples5starParticleRoute
  '/samples/audio-circle': typeof SamplesAudioCircleRoute
  '/samples/detector': typeof SamplesDetectorRoute
  '/samples/face-landmark-detector': typeof SamplesFaceLandmarkDetectorRoute
  '/samples/fluid-detect': typeof SamplesFluidDetectRoute
  '/samples/follower-circle': typeof SamplesFollowerCircleRoute
  '/samples/hand-pose-detection': typeof SamplesHandPoseDetectionRoute
  '/samples/istate': typeof SamplesIstateRoute
  '/samples/normal-circle': typeof SamplesNormalCircleRoute
  '/samples/pose-detection': typeof SamplesPoseDetectionRoute
  '/samples/square-apark': typeof SamplesSquareAparkRoute
  '/three-dimension/particle': typeof ThreeDimensionParticleRoute
  '/three-dimension/shader': typeof ThreeDimensionShaderRoute
  '/three-dimension/shadows': typeof ThreeDimensionShadowsRoute
  '/aggregate-bill': typeof AggregateBillIndexRoute
  '/audio': typeof AudioIndexRoute
  '/crypto-charts': typeof CryptoChartsIndexRoute
  '/noise': typeof NoiseIndexRoute
  '/three-dimension': typeof ThreeDimensionIndexRoute
  '/crypto-charts/multi/$token': typeof CryptoChartsMultiTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/melt-the-border': typeof MeltTheBorderRoute
  '/playground': typeof PlaygroundRoute
  '/shader': typeof ShaderRoute
  '/stable-fluids': typeof StableFluidsRoute
  '/audio/mic': typeof AudioMicRoute
  '/audio/speech': typeof AudioSpeechRoute
  '/noise/cellular': typeof NoiseCellularRoute
  '/noise/fbm': typeof NoiseFbmRoute
  '/noise/fractal': typeof NoiseFractalRoute
  '/samples/5star-particle': typeof Samples5starParticleRoute
  '/samples/audio-circle': typeof SamplesAudioCircleRoute
  '/samples/detector': typeof SamplesDetectorRoute
  '/samples/face-landmark-detector': typeof SamplesFaceLandmarkDetectorRoute
  '/samples/fluid-detect': typeof SamplesFluidDetectRoute
  '/samples/follower-circle': typeof SamplesFollowerCircleRoute
  '/samples/hand-pose-detection': typeof SamplesHandPoseDetectionRoute
  '/samples/istate': typeof SamplesIstateRoute
  '/samples/normal-circle': typeof SamplesNormalCircleRoute
  '/samples/pose-detection': typeof SamplesPoseDetectionRoute
  '/samples/square-apark': typeof SamplesSquareAparkRoute
  '/three-dimension/particle': typeof ThreeDimensionParticleRoute
  '/three-dimension/shader': typeof ThreeDimensionShaderRoute
  '/three-dimension/shadows': typeof ThreeDimensionShadowsRoute
  '/aggregate-bill/': typeof AggregateBillIndexRoute
  '/audio/': typeof AudioIndexRoute
  '/crypto-charts/': typeof CryptoChartsIndexRoute
  '/noise/': typeof NoiseIndexRoute
  '/three-dimension/': typeof ThreeDimensionIndexRoute
  '/crypto-charts/multi/$token': typeof CryptoChartsMultiTokenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/melt-the-border'
    | '/playground'
    | '/shader'
    | '/stable-fluids'
    | '/audio/mic'
    | '/audio/speech'
    | '/noise/cellular'
    | '/noise/fbm'
    | '/noise/fractal'
    | '/samples/5star-particle'
    | '/samples/audio-circle'
    | '/samples/detector'
    | '/samples/face-landmark-detector'
    | '/samples/fluid-detect'
    | '/samples/follower-circle'
    | '/samples/hand-pose-detection'
    | '/samples/istate'
    | '/samples/normal-circle'
    | '/samples/pose-detection'
    | '/samples/square-apark'
    | '/three-dimension/particle'
    | '/three-dimension/shader'
    | '/three-dimension/shadows'
    | '/aggregate-bill'
    | '/audio'
    | '/crypto-charts'
    | '/noise'
    | '/three-dimension'
    | '/crypto-charts/multi/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/melt-the-border'
    | '/playground'
    | '/shader'
    | '/stable-fluids'
    | '/audio/mic'
    | '/audio/speech'
    | '/noise/cellular'
    | '/noise/fbm'
    | '/noise/fractal'
    | '/samples/5star-particle'
    | '/samples/audio-circle'
    | '/samples/detector'
    | '/samples/face-landmark-detector'
    | '/samples/fluid-detect'
    | '/samples/follower-circle'
    | '/samples/hand-pose-detection'
    | '/samples/istate'
    | '/samples/normal-circle'
    | '/samples/pose-detection'
    | '/samples/square-apark'
    | '/three-dimension/particle'
    | '/three-dimension/shader'
    | '/three-dimension/shadows'
    | '/aggregate-bill'
    | '/audio'
    | '/crypto-charts'
    | '/noise'
    | '/three-dimension'
    | '/crypto-charts/multi/$token'
  id:
    | '__root__'
    | '/'
    | '/melt-the-border'
    | '/playground'
    | '/shader'
    | '/stable-fluids'
    | '/audio/mic'
    | '/audio/speech'
    | '/noise/cellular'
    | '/noise/fbm'
    | '/noise/fractal'
    | '/samples/5star-particle'
    | '/samples/audio-circle'
    | '/samples/detector'
    | '/samples/face-landmark-detector'
    | '/samples/fluid-detect'
    | '/samples/follower-circle'
    | '/samples/hand-pose-detection'
    | '/samples/istate'
    | '/samples/normal-circle'
    | '/samples/pose-detection'
    | '/samples/square-apark'
    | '/three-dimension/particle'
    | '/three-dimension/shader'
    | '/three-dimension/shadows'
    | '/aggregate-bill/'
    | '/audio/'
    | '/crypto-charts/'
    | '/noise/'
    | '/three-dimension/'
    | '/crypto-charts/multi/$token'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MeltTheBorderRoute: typeof MeltTheBorderRoute
  PlaygroundRoute: typeof PlaygroundRoute
  ShaderRoute: typeof ShaderRoute
  StableFluidsRoute: typeof StableFluidsRoute
  AudioMicRoute: typeof AudioMicRoute
  AudioSpeechRoute: typeof AudioSpeechRoute
  NoiseCellularRoute: typeof NoiseCellularRoute
  NoiseFbmRoute: typeof NoiseFbmRoute
  NoiseFractalRoute: typeof NoiseFractalRoute
  Samples5starParticleRoute: typeof Samples5starParticleRoute
  SamplesAudioCircleRoute: typeof SamplesAudioCircleRoute
  SamplesDetectorRoute: typeof SamplesDetectorRoute
  SamplesFaceLandmarkDetectorRoute: typeof SamplesFaceLandmarkDetectorRoute
  SamplesFluidDetectRoute: typeof SamplesFluidDetectRoute
  SamplesFollowerCircleRoute: typeof SamplesFollowerCircleRoute
  SamplesHandPoseDetectionRoute: typeof SamplesHandPoseDetectionRoute
  SamplesIstateRoute: typeof SamplesIstateRoute
  SamplesNormalCircleRoute: typeof SamplesNormalCircleRoute
  SamplesPoseDetectionRoute: typeof SamplesPoseDetectionRoute
  SamplesSquareAparkRoute: typeof SamplesSquareAparkRoute
  ThreeDimensionParticleRoute: typeof ThreeDimensionParticleRoute
  ThreeDimensionShaderRoute: typeof ThreeDimensionShaderRoute
  ThreeDimensionShadowsRoute: typeof ThreeDimensionShadowsRoute
  AggregateBillIndexRoute: typeof AggregateBillIndexRoute
  AudioIndexRoute: typeof AudioIndexRoute
  CryptoChartsIndexRoute: typeof CryptoChartsIndexRoute
  NoiseIndexRoute: typeof NoiseIndexRoute
  ThreeDimensionIndexRoute: typeof ThreeDimensionIndexRoute
  CryptoChartsMultiTokenRoute: typeof CryptoChartsMultiTokenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MeltTheBorderRoute: MeltTheBorderRoute,
  PlaygroundRoute: PlaygroundRoute,
  ShaderRoute: ShaderRoute,
  StableFluidsRoute: StableFluidsRoute,
  AudioMicRoute: AudioMicRoute,
  AudioSpeechRoute: AudioSpeechRoute,
  NoiseCellularRoute: NoiseCellularRoute,
  NoiseFbmRoute: NoiseFbmRoute,
  NoiseFractalRoute: NoiseFractalRoute,
  Samples5starParticleRoute: Samples5starParticleRoute,
  SamplesAudioCircleRoute: SamplesAudioCircleRoute,
  SamplesDetectorRoute: SamplesDetectorRoute,
  SamplesFaceLandmarkDetectorRoute: SamplesFaceLandmarkDetectorRoute,
  SamplesFluidDetectRoute: SamplesFluidDetectRoute,
  SamplesFollowerCircleRoute: SamplesFollowerCircleRoute,
  SamplesHandPoseDetectionRoute: SamplesHandPoseDetectionRoute,
  SamplesIstateRoute: SamplesIstateRoute,
  SamplesNormalCircleRoute: SamplesNormalCircleRoute,
  SamplesPoseDetectionRoute: SamplesPoseDetectionRoute,
  SamplesSquareAparkRoute: SamplesSquareAparkRoute,
  ThreeDimensionParticleRoute: ThreeDimensionParticleRoute,
  ThreeDimensionShaderRoute: ThreeDimensionShaderRoute,
  ThreeDimensionShadowsRoute: ThreeDimensionShadowsRoute,
  AggregateBillIndexRoute: AggregateBillIndexRoute,
  AudioIndexRoute: AudioIndexRoute,
  CryptoChartsIndexRoute: CryptoChartsIndexRoute,
  NoiseIndexRoute: NoiseIndexRoute,
  ThreeDimensionIndexRoute: ThreeDimensionIndexRoute,
  CryptoChartsMultiTokenRoute: CryptoChartsMultiTokenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/melt-the-border",
        "/playground",
        "/shader",
        "/stable-fluids",
        "/audio/mic",
        "/audio/speech",
        "/noise/cellular",
        "/noise/fbm",
        "/noise/fractal",
        "/samples/5star-particle",
        "/samples/audio-circle",
        "/samples/detector",
        "/samples/face-landmark-detector",
        "/samples/fluid-detect",
        "/samples/follower-circle",
        "/samples/hand-pose-detection",
        "/samples/istate",
        "/samples/normal-circle",
        "/samples/pose-detection",
        "/samples/square-apark",
        "/three-dimension/particle",
        "/three-dimension/shader",
        "/three-dimension/shadows",
        "/aggregate-bill/",
        "/audio/",
        "/crypto-charts/",
        "/noise/",
        "/three-dimension/",
        "/crypto-charts/multi/$token"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/melt-the-border": {
      "filePath": "melt-the-border.tsx"
    },
    "/playground": {
      "filePath": "playground.tsx"
    },
    "/shader": {
      "filePath": "shader.tsx"
    },
    "/stable-fluids": {
      "filePath": "stable-fluids.tsx"
    },
    "/audio/mic": {
      "filePath": "audio/mic.tsx"
    },
    "/audio/speech": {
      "filePath": "audio/speech.tsx"
    },
    "/noise/cellular": {
      "filePath": "noise/cellular.tsx"
    },
    "/noise/fbm": {
      "filePath": "noise/fbm.tsx"
    },
    "/noise/fractal": {
      "filePath": "noise/fractal.tsx"
    },
    "/samples/5star-particle": {
      "filePath": "samples/5star-particle.tsx"
    },
    "/samples/audio-circle": {
      "filePath": "samples/audio-circle.tsx"
    },
    "/samples/detector": {
      "filePath": "samples/detector.tsx"
    },
    "/samples/face-landmark-detector": {
      "filePath": "samples/face-landmark-detector.tsx"
    },
    "/samples/fluid-detect": {
      "filePath": "samples/fluid-detect.tsx"
    },
    "/samples/follower-circle": {
      "filePath": "samples/follower-circle.tsx"
    },
    "/samples/hand-pose-detection": {
      "filePath": "samples/hand-pose-detection.tsx"
    },
    "/samples/istate": {
      "filePath": "samples/istate.tsx"
    },
    "/samples/normal-circle": {
      "filePath": "samples/normal-circle.tsx"
    },
    "/samples/pose-detection": {
      "filePath": "samples/pose-detection.tsx"
    },
    "/samples/square-apark": {
      "filePath": "samples/square-apark.tsx"
    },
    "/three-dimension/particle": {
      "filePath": "three-dimension/particle.tsx"
    },
    "/three-dimension/shader": {
      "filePath": "three-dimension/shader.tsx"
    },
    "/three-dimension/shadows": {
      "filePath": "three-dimension/shadows.tsx"
    },
    "/aggregate-bill/": {
      "filePath": "aggregate-bill/index.tsx"
    },
    "/audio/": {
      "filePath": "audio/index.tsx"
    },
    "/crypto-charts/": {
      "filePath": "crypto-charts/index.tsx"
    },
    "/noise/": {
      "filePath": "noise/index.tsx"
    },
    "/three-dimension/": {
      "filePath": "three-dimension/index.tsx"
    },
    "/crypto-charts/multi/$token": {
      "filePath": "crypto-charts/multi/$token.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
